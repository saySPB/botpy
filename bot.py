import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from enum import Enum, auto
from enum import IntEnum
# –í–ê–® –¢–û–ö–ï–ù!!! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
BOT_TOKEN = '7570956742:AAE3NLprO8RO96hfVTpnmE3UqQZRWlK3XH8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°—Ç–∞–¥–∏–∏ –¥–ª—è ConversationHandler
class ConversationStates(IntEnum):
    CHOOSING = 0
    WISH = 1
    STATUS = 2
    IMAGE = auto()
    TIME_END = auto()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏–π
wishes = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_wishes = wishes.get(user_id, {})
    message = "‚ú® –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è! ‚ú®\n"

    if user_wishes:
        message += "\n–¢–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è:\n"
        for i, wish_key in enumerate(user_wishes):
            wish_data = user_wishes[wish_key]
            message += f"{i+1}. {wish_data.get('wish', '–ñ–µ–ª–∞–Ω–∏–µ')} ({wish_data.get('status','')})\n"

    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data=f"add_wish:{len(wishes.get(user_id, {}))}"),
                     InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="remove_wish")],
                [InlineKeyboardButton("üìù –í—Å–µ –∂–µ–ª–∞–Ω–∏—è", callback_data="all_wishes")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    if query.data == "add_wish":
        context.user_data['wish_key'] = str(len(wishes.get(user_id, {})))
        await add_wish(update.callback_query.message, context)
        return ConversationStates.WISH
    elif query.data == "remove_wish":
        user_wishes = wishes.get(user_id, {})
        if user_wishes:
            keyboard = []
            for wish_key in user_wishes:
                keyboard.append([InlineKeyboardButton(f"‚ùå {user_wishes[wish_key].get('wish', '–ñ–µ–ª–∞–Ω–∏–µ')}", callback_data=f"delete:{wish_key}")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        else:
            await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    elif query.data == "all_wishes":
        await show_all_wishes(update.callback_query.message, context)
    elif query.data.startswith("delete:"):
        wish_key_to_delete = query.data.split(":")[1]
        if wishes.get(user_id, {}).get(wish_key_to_delete):
            del wishes[user_id][wish_key_to_delete]
            await query.edit_message_text("–ñ–µ–ª–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
            await start(update.callback_query.message, context)

async def show_all_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_wishes = wishes.get(user_id, {})
    message = "üìù –í—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è:\n"
    if user_wishes:
        for i, wish_key in enumerate(user_wishes):
            wish_data = user_wishes[wish_key]
            message += f"{i+1}. {wish_data.get('wish', '–ñ–µ–ª–∞–Ω–∏–µ')} ({wish_data.get('status','')})\n"
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π /add_wish, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.")

async def add_wish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    wish_key = context.user_data.get('wish_key') # –ü–æ–ª—É—á–∞–µ–º wish_key –∏–∑ user_data
    context.data['wish_key'] = wish_key # –ö–æ–ø–∏—Ä—É–µ–º –≤ context.data

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è:")
    return ConversationStates.WISH


async def wish_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.data['wish'] = update.message.text
    await update.message.reply_text("üëç –ñ–µ–ª–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Å—Ç–∞—Ç—É—Å:", reply_markup=ReplyKeyboardMarkup([["–í –ø—Ä–æ—Ü–µ—Å—Å–µ ‚è≥", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ", "–û—Ç–ª–æ–∂–µ–Ω–æ ‚è∏Ô∏è"]], resize_keyboard=True, one_time_keyboard=True))
    return ConversationStates.STATUS

async def status_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    wishes.setdefault(user_id, {}).update({context.data.get('wish_key'): {"wish": context.data['wish'], "status": update.message.text}})
    await update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', reply_markup=ReplyKeyboardRemove())
    return ConversationStates.IMAGE

async def image_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytes() # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        wishes[user_id][context.data.get('wish_key')]["image"] = photo_bytes
    elif update.message.document:
        doc_file = await update.message.document.get_file()
        doc_bytes = await doc_file.download_as_bytes() # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–π—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
        wishes[user_id][context.data.get('wish_key')]["image"] = doc_bytes
    else:
        wishes[user_id][context.data.get('wish_key')]["image"] = None

    await update.message.reply_text('–°—É–ø–µ—Ä! –£–∫–∞–∂–∏ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):')
    return ConversationStates.TIME_END

async def time_end_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    wishes[user_id][context.data.get('wish_key')]["time_end"] = update.message.text
    await update.message.reply_text('üí´ –í–∞—à–µ –∂–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    await start(update, context) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def main():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    conversation_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        ConversationStates.CHOOSING: [CallbackQueryHandler(button_callback)],
        ConversationStates.WISH: [MessageHandler(filters.TEXT & ~filters.COMMAND, wish_entered)],
        ConversationStates.STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_entered)] # –ò –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

    application.add_handler(conversation_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button_callback))

    application.run_polling()

if __name__ == '__main__':
    main()
